1. create a new angular app
2. Doing firebase setup
    Browser
        2.1. create a firebase account 
        2.2. create a project
        2.3. setup authentication mode - Authentication Tab(Sign-in method) - email
        2.4. create security rules - Realtime DB(rules)
        2.5. Add Firebase to your webapp -> copy the firebase object and add it to environment file
    
    Angular project
        2.1. Install firebase SDK.
        2.2. Install AngularFire - a ts library which acts like a bridge btw Angular app --- firebase

3. Creating an Auth Module 
    3.1. It further divides into - login, register, shared
    3.2. Making routes lazy loaded(login, register)
    3.3. creating Auth-form component and its implementation
    3.4. create Auth service 
            1. Creating Methods 
                1. To create user
                2. To login user 
            2. DI service as forRoot into main feature module - to avoid duplicate instance
                1. Invoke as sharedModule.forRoot - in main feature module (Auth Module)
                2. Just do a normal import of sharedModule - in sub feature modules(login, register)
            3. Consuming the service
            4. Redirection / error msg implementation based on response from firebase

4. setting up store 
    4.1. creating the store
    4.2. creating a short path for importing store
    4.3. Invoking the store and setting value
    4.4. selecting value from store 

Note: 
    1. Our store will be empty on page reload. Data will be persisted only when we navigate across our application without reload.    
    2. This allows us to avoid unwanted api calls to retrieve data on every revisit instead it will be obtained from store once published.
    
5. Adding Header and Navbar functionality
    5.1. Header 
            1. Display logout btn conditonally
            2. Styling pending
    5.2. Navbar
            1. Display navbar post login  
            2. Styling pending

6. Creating a Health module
    6.1. It further divides into - schedule, meals, workouts
    6.2. Lazy load these sub feature modules 
    6.3. Mapping routes to our navbar
            - with angular material mat-tab -> we couldn't fire routerlink
            - we used another version of mat-tab - refer links section

7. Creating an Auth-Guard - to prevent user from accessing secured pages
    7.1. Create a auth-guard injectable - which implements canactivate  
    7.2. Register canactivate wd our secured routes 
    7.3. Add default route - schedule so post login this route is selected by default

8. Implemeting the meals feature
    8.1. creating a shared module - as meals data is shared among other features
    8.2. creating a meals service - to obtain data
    8.3. creating a new state in store - for meals feature
    8.4. creating a smart and dumb component - architecture
            Meals - dashboard - smart component
                Add meal - smart and dumb component
    8.5. implementation of dumb component -meal-form
    8.6. Adding meal detail to firebase
    8.7. Retrieving data from firebase and rendering in frontend - list-item component
    8.8. Create a dynamic route with id 
            - 1. Reusing the create meal component - y ? bcz
                - 1.1 To enable the edit functionality for that specific meal - Add/ Delete
                - 1.2. Implemeting specific functionalities for "Create Meal" and "Edit Meal"
                    1. Title - Create / Edit
                    2. Input fields data - Empty / auto-populate
                    3. Action - Create / Update

9. Implemeting the workouts feature - works same as meal feature    
    9.1. creating a workouts service - to obtain data
    9.2. creating a new state in store - for workouts feature
    9.3. creating a smart and dumb component - architecture
             Workouts - dashboard - smart component
                Add workout - smart and dumb component
    9.5. implementation of dumb component -workout-form
    9.6. Adding workout detail to firebase
    9.7. Retrieving data from firebase and rendering in frontend - list-item component
            - Making our list-it-component -> dynamic



Last - pending
--------------
1. styling
2. security
3. Testing 